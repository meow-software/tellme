export enum AppCodes {
  HEY = "APP.HEY",
  PONG = "APP.PONG",
  LISTENING = "APP.LISTENING",
  LANG_DETECTED = "APP.LANG_DETECTED"
}

export enum HealthCodes {
  STATUS_OK = "HEALTH.STATUS_OK"
}

export enum AuthCodes {
  TOKEN_REQUIRED = "AUTH.TOKEN_REQUIRED",
  NO_REFRESH_TOKEN = "AUTH.NO_REFRESH_TOKEN",
  CHECK_EMAIL_CONFIRMATION = "AUTH.CHECK_EMAIL_CONFIRMATION",
  NO_USER_WITH_ID = "AUTH.NO_USER_WITH_ID",
  ACCOUNT_ALREADY_CONFIRMED = "AUTH.ACCOUNT_ALREADY_CONFIRMED",
  INVALID_CREDENTIALS = "AUTH.INVALID_CREDENTIALS",
  ACCOUNT_NOT_CONFIRMED = "AUTH.ACCOUNT_NOT_CONFIRMED",
  INVALID_OR_EXPIRED_REFRESH_TOKEN = "AUTH.INVALID_OR_EXPIRED_REFRESH_TOKEN",
  REFRESH_TOKEN_INVALID_OR_REVOKED = "AUTH.REFRESH_TOKEN_INVALID_OR_REVOKED",
  INVALID_CSRF_TOKEN = "AUTH.INVALID_CSRF_TOKEN",
  NO_USER_WITH_EMAIL = "AUTH.NO_USER_WITH_EMAIL",
  USER_HAS_NO_EMAIL = "AUTH.USER_HAS_NO_EMAIL",
  INVALID_EXPIRED_TOKEN = "AUTH.INVALID_EXPIRED_TOKEN",
  INVALID_BOT_CREDENTIALS = "AUTH.INVALID_BOT_CREDENTIALS",
  INVALID_USER_CREDENTIALS = "AUTH.INVALID_USER_CREDENTIALS",
  CONFIRMATION_EMAIL_RESENT = "AUTH.CONFIRMATION_EMAIL_RESENT",
  PASSWORD_RESET_LINK_SENT = "AUTH.PASSWORD_RESET_LINK_SENT",
  LOGGED_OUT = "AUTH.LOGGED_OUT",
  REGISTRATION_FAILED = "AUTH.REGISTRATION_FAILED",
  USERNAME_OR_EMAIL_EXISTS = "AUTH.USERNAME_OR_EMAIL_EXISTS",
  NOT_FOUND = "AUTH.NOT_FOUND",
  INVALID_OLD_PASSWORD = "AUTH.INVALID_OLD_PASSWORD",
  NO_FIELDS_TO_UPDATE = "AUTH.NO_FIELDS_TO_UPDATE",
  NOT_CONNECTED = "AUTH.NOT_CONNECTED",
  PASSWORD_UPDATED = "AUTH.PASSWORD_UPDATED"
}

export enum EmailCodes {
  SENT_SUCCESS = "EMAIL.SENT_SUCCESS",
  SENT_ERROR = "EMAIL.SENT_ERROR",
  WELCOME_SUBJECT = "EMAIL.WELCOME_SUBJECT",
  RESET_PASSWORD_SUBJECT = "EMAIL.RESET_PASSWORD_SUBJECT",
  CONFIRM_SUBJECT = "EMAIL.CONFIRM_SUBJECT"
}

export interface ITranslationKeys {
  APP_CODES: typeof AppCodes;
  HEALTH_CODES: typeof HealthCodes;
  AUTH_CODES: typeof AuthCodes;
  EMAIL_CODES: typeof EmailCodes;
}

export function getNamespace(code: string) {
  const namespace= code.split('.')[0];
  if (namespace) return namespace.toLocaleLowerCase();
  return namespace;
}

export function getKey(code: string) {
  return code.split('.')[1];
}

export function splitCode(code: string) {
  return {
    namespace: getNamespace(code),
    key: getKey(code)
  }
}